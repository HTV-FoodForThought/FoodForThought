{"version":3,"sources":["backend/backendRequests.js","Search.js","Title.js","RecipesPage.js","App.js","serviceWorker.js","index.js","resources/placeholder.jpg","resources/title-image.jpg","resources/thot.png"],"names":["base_url","Search","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleFile","e","preventDefault","r","FileReader","file","target","files","setState","objectSpread","state","firstLoad","loadingImage","onloadend","selectedImage","result","imageFile","readAsDataURL","image","data","FormData","append","fileName","axios","headers","Content-Type","concat","_boundary","method","url","upload_photo","then","responseJson","copy","response","forEach","element","push","react_default","a","createElement","index_es","button","onClick","addIngredient","bind","assertThisInitialized","currImageIngredients","catch","error","console","log","placeholder","selectedIngredients","ingredientList","_this2","LoadingOverlay_default","active","spinner","text","type","onChange","className","src","alt","Link","exact","to","pathname","ingredients","includes","toConsumableArray","copyTwo","removeIngredient","index","indexOf","splice","Component","Title","Fade_default","yeet","title","LightSpeed_default","left","RecipesPage","getItems","pageNum","page","substring","length","get_recipes","location","recipes","orig_len","href","thumbnail","has_more_recipes","loading","current_page","loader","react_infinite_scroller_default","pageStart","loadMore","hasMore","App","BrowserRouter","Route","path","component","children","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.36aa369c.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport FormData from 'form-data';\r\n\r\nconst base_url = 'http://localhost:5000/'\r\n\r\nexport function upload_photo(image) {\r\n    // https://stackoverflow.com/questions/39663961/how-do-you-send-images-to-node-js-with-axios\r\n    let data = new FormData();\r\n    data.append('image', image, image.fileName);\r\n    return axios({\r\n        headers: {\r\n            'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\r\n        },\r\n        method: 'post',\r\n        url: `${base_url}upload_photo`,\r\n        data: data\r\n    });\r\n}\r\n\r\n// ingredients should be an array of strings\r\nexport function get_recipes(ingredients, page) {\r\n    let url = `${base_url}get_recipes?page=${page}&ingredients=`;\r\n    ingredients.forEach(element => {\r\n        url += element + ','\r\n    });\r\n    url = url.substring(0, url.length - 1);\r\n    return axios({\r\n        method: 'get',\r\n        url: url\r\n    });\r\n}","import React, { Component } from 'react';\r\nimport './Search.css';\r\nimport { Link } from 'react-router-dom';\r\nimport placeholder from './resources/placeholder.jpg'\r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport { upload_photo } from './backend/backendRequests.js';\r\nimport { ListItem } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\n\r\nclass Search extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            firstLoad: true,\r\n            loadingImage: false,\r\n            selectedImage: placeholder,\r\n            imageFile: null,\r\n            currImageIngredients: [],\r\n            selectedIngredients: [],\r\n            ingredientList: [],\r\n        };\r\n    }\r\n\r\n    render() {\r\n        if(this.state.loadingImage) {\r\n            return(\r\n                <LoadingOverlay active={this.state.loadingImage} spinner text='Loading your content...'>\r\n                </LoadingOverlay>\r\n            );\r\n        }\r\n        return(\r\n            <div>\r\n                <h1>Add an Ingredient</h1> \r\n                <input type=\"file\" onChange ={(e) => this.handleFile(e)} className = \"selectFile\"></input>\r\n                {/*https://countrylakesdental.com/wp-content/uploads/2016/10/orionthemes-placeholder-image.jpg*/}\r\n                <img src= {this.state.selectedImage} alt=\"Uploaded Ingredient\" className=\"ingredientImage\"></img>\r\n                {/*title + upload + placeholder image*/}\r\n                {this.state.currImageIngredients}\r\n                <p>Selected Ingredients:</p>\r\n                {this.state.ingredientList}\r\n                <Link exact to={{\r\n                    pathname: \"/recipes\",\r\n                    state: {\r\n                        ingredients: this.state.selectedIngredients\r\n                    }\r\n                }} className=\"recipeLink\">Find recipes</Link>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    /*With reference to https://codepen.io/hartzis/pen/VvNGZP*/\r\n    handleFile = (e) => {\r\n        e.preventDefault();\r\n        let r = new FileReader();\r\n        let file = e.target.files[0];\r\n        this.setState({...this.state, firstLoad: false, loadingImage: true});\r\n        r.onloadend = () => {\r\n            this.setState({...this.state, selectedImage: r.result, imageFile: file});\r\n        }\r\n        r.readAsDataURL(file);\r\n        upload_photo(file).then((responseJson) => {\r\n            let copy = [];\r\n            responseJson.data.response.forEach(element => {\r\n                copy.push(\r\n                    <ListItem button onClick={this.addIngredient.bind(this,element)}>\r\n                        <p>{element}</p>\r\n                    </ListItem>\r\n                )\r\n            });\r\n            this.setState({...this.state, currImageIngredients: copy, loadingImage: false});\r\n        }) .catch((error) => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    addIngredient(element) {\r\n        if (!this.state.selectedIngredients.includes(element)) {\r\n            let copy = [...this.state.selectedIngredients];\r\n            copy.push(element);\r\n            let copyTwo = [...this.state.ingredientList];\r\n            copyTwo.push(<ListItem button onClick={this.removeIngredient.bind(this,element)}>\r\n                        <p>{element}</p>\r\n                        </ListItem>)\r\n            this.setState({...this.state, selectedIngredients: copy, ingredientList: copyTwo});\r\n        }\r\n    }\r\n\r\n    removeIngredient(element) {\r\n        let copy = [...this.state.selectedIngredients];\r\n        let copyTwo = [...this.state.ingredientList];\r\n        var index = copy.indexOf(element);\r\n        copy.splice(index, 1);\r\n        copyTwo.splice(index, 1);\r\n        this.setState({...this.state, selectedIngredients: copy, ingredientList: copyTwo});\r\n    }\r\n}\r\nexport default Search\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Title.css';\r\nimport title from './resources/title-image.jpg';\r\nimport yeet from './resources/thot.png';\r\nimport Fade from 'react-reveal/Fade';\r\nimport LightSpeed from 'react-reveal/LightSpeed';\r\nimport Flip from 'react-reveal/Flip';\r\n\r\nclass Title extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"title\">\r\n                <div className=\"title-header\">\r\n                    <Fade><img src={yeet} alt=\"Thought bubble.\" className=\"thot-image\"/></Fade>\r\n                    <Fade><h1>Food for Thought</h1></Fade>\r\n                    {/*image from https://nypost.com/2018/04/04/youre-likely-eating-tiny-chunks-of-plastic-in-home-cooked-meals/*/}\r\n                    <Fade><img src={title} alt=\"Tasty food being cooked.\" className=\"title-image\"/></Fade>\r\n                    <LightSpeed left><h4>You have the ingredients, we've got the dishes</h4></LightSpeed>\r\n                    <Link className=\"title-btn\" to=\"/recipes\">Begin</Link>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Title","import React, { Component } from 'react';\r\nimport { get_recipes } from './backend/backendRequests';\r\nimport { ListItem } from '@material-ui/core';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\n\r\n\r\nexport default class RecipesPage extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: true,\r\n            current_page: 1,\r\n            recipes: [],\r\n            error: false, \r\n            has_more_recipes: true,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        return this.getItems(0);\r\n    }\r\n\r\n    getItems = (pageNum) => {\r\n        const { ingredients } = this.props.location.state;\r\n        return get_recipes(ingredients, pageNum)\r\n            .then((responseJson) => {\r\n                let copy = [...this.state.recipes];\r\n                let orig_len = copy.length;\r\n                // turn response into list elements\r\n                responseJson.data.response.forEach(element => {\r\n                    copy.push(\r\n                        <ListItem button>\r\n                            <a href={element.href} target='_blank'>\r\n                                <p>{element.title}</p>\r\n                                <img src={element.thumbnail}/>\r\n                                <p>Ingredients: {element.ingredients}</p>\r\n                            </a>\r\n                        </ListItem>        \r\n                    )\r\n                });\r\n                // if no new items, set that\r\n                if (orig_len === copy.length) {\r\n                    console.log('no more items');\r\n                    this.setState({\r\n                        ...this.state,\r\n                        has_more_recipes: false\r\n                    })\r\n                }\r\n                this.setState({\r\n                    ...this.state,\r\n                    loading: false,\r\n                    recipes: copy.concat(responseJson.response)\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                this.setState({\r\n                    ...this.state,\r\n                    loading: false,\r\n                    error: true\r\n                })\r\n            })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.loading) {\r\n            return(\r\n                <div>\r\n                    LOADING...\r\n                </div>\r\n            )\r\n        } else if (this.state.error) {\r\n            return(\r\n                <div>\r\n                    ERROR...\r\n                </div>\r\n            )\r\n        }\r\n        const loader = <div className=\"loader\">Loading ...</div>;\r\n\r\n        return(\r\n            <div>\r\n                <h1>Recipes</h1>\r\n                <InfiniteScroll\r\n                    pageStart={1}\r\n                    loadMore={this.getItems}\r\n                    loader={loader}\r\n                    hasMore={this.state.has_more_recipes}>\r\n                    {this.state.recipes}\r\n                </InfiniteScroll>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport './App.css';\r\nimport Search from './Search.js';\r\nimport Title from './Title.js';\r\nimport RecipesPage from './RecipesPage';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n         <header className=\"App-header\">\r\n           <Route exact path=\"/\" component={Title}/>\r\n           <Route exact path=\"/search\" component={Search}/>\r\n           <Route exact path=\"/recipes\" component={RecipesPage}/>\r\n           {this.props.children}\r\n          </header>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/placeholder.fc89825e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/title-image.7991e569.jpg\";","module.exports = __webpack_public_path__ + \"static/media/thot.b6c617a2.png\";"],"sourceRoot":""}